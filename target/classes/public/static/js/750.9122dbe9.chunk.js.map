{"version":3,"file":"static/js/750.9122dbe9.chunk.js","mappings":"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","sources":["views/rwa-calculator/index.js"],"sourcesContent":["import {\n    Box,\n    FormControl,\n    FormControlLabel,\n    FormLabel,\n    RadioGroup,\n    TextField,\n    Radio,\n    Switch,\n    Stack,\n    Divider,\n    Button,\n    CircularProgress,\n    Backdrop,\n    Autocomplete\n} from '@mui/material';\nimport MainCard from 'ui-component/cards/MainCard';\nimport SubCard from '../../ui-component/cards/SubCard';\nimport * as React from 'react';\nimport axios from 'axios';\nimport country from './country.json';\nimport rating from './rating.json';\n\nconst RwaCalculator = () => {\n    const [open, setOpen] = React.useState(false);\n    const handleClose = () => {\n        setOpen(false);\n    };\n    const [showResult, setShowResult] = React.useState(true);\n    const [ead, setEad] = React.useState('0');\n    const [lgd, setLgd] = React.useState('0');\n    const [rwa, setRwa] = React.useState('0');\n    const [NPVRecoverySecuredCash, setNPVRecoverySecuredCash] = React.useState('0');\n    const [NPVRecoveryUnsecuredCash, setNPVRecoveryUnsecuredCash] = React.useState('0');\n    const [lgdCashGuar, setLgdCashGuar] = React.useState('0');\n    const [npvRecSecCashGuar, setNpvRecSecCashGuar] = React.useState('0');\n    const [npvRecUnSecCashGuar, setNpvRecUnSecCashGuar] = React.useState('0');\n    const [rwaCashGuar, setRwaCashGuar] = React.useState('0');\n    const handleToggle = () => {\n        console.log(selectedCountry);\n        axios\n            .post(`http://localhost:8081/calculate`, {\n                typeOfCustomer: typeOfClient,\n                fxMismatch: fxMismatchChecked,\n                debitBalance: debitBalances,\n                creditBalance: creditBalances,\n                country: selectedCountry,\n                rating: selectedRating,\n                limit: limit,\n                expectedIncome: expectedIncome,\n                hurdleReturn: hurdleReturn,\n                ingGuarantee: ingGuarantee\n            })\n            .then((res) => {\n                setEad(res.data.ead);\n                setLgd(res.data.lgd);\n                setNPVRecoverySecuredCash(res.data.npvRecSecCash);\n                setNPVRecoveryUnsecuredCash(res.data.npvRecUnSecCash);\n                setRwa(res.data.rwaCash);\n                setLgdCashGuar(res.data.lgdCashGuar);\n                setNpvRecSecCashGuar(res.data.npvRecSecCashGuar);\n                setNpvRecUnSecCashGuar(res.data.npvRecUnSecCashGuar);\n                setRwaCashGuar(res.data.rwaCashGuar);\n            });\n        handleClose();\n        setShowResult(!showResult);\n    };\n\n    const [typeOfClient, setTypeOfClient] = React.useState('Corporate clients');\n    const changeClientType = (event) => {\n        setTypeOfClient(event.target.value);\n    };\n\n    const [ingGuarantee, setIngGuarantee] = React.useState('');\n    const changeIngGuarantee = (event) => {\n        setIngGuarantee(event.target.value);\n    };\n\n    const [debitBalances, setDebitBalances] = React.useState('');\n    const changeDebitBalances = (event) => {\n        setDebitBalances(event.target.value);\n    };\n\n    const [creditBalances, setCreditBalances] = React.useState('');\n    const changeCreditBalances = (event) => {\n        setCreditBalances(event.target.value);\n    };\n\n    const [expectedIncome, setExpectedIncome] = React.useState('');\n    const changeExpectedIncome = (event) => {\n        setExpectedIncome(event.target.value);\n    };\n\n    const [hurdleReturn, setHurdleReturn] = React.useState('');\n    const changeHurdleReturn = (event) => {\n        setHurdleReturn(event.target.value);\n    };\n\n    const [limit, setLimit] = React.useState('');\n    const changeLimit = (event) => {\n        setLimit(event.target.value);\n    };\n\n    const [selectedCountry, setSelectedCountry] = React.useState(countries[0]);\n    const [inputValue, setInputValue] = React.useState(countries[0]);\n\n    const [selectedRating, setSelectedRating] = React.useState(ratings[0]);\n    const [ratingInputValue, setRatingInputValue] = React.useState(ratings[0]);\n\n    const [fxMismatchChecked, setFxMismatchChecked] = React.useState(true);\n    const handleFxMismatchSwitch = (event) => {\n        setFxMismatchChecked(!fxMismatchChecked);\n    };\n\n    return (\n        <MainCard title=\"RWA calculator\">\n            <SubCard title=\"Customer static data\">\n                <Stack direction=\"row\" divider={<Divider orientation=\"vertical\" flexItem />} spacing={5}>\n                    <FormControl>\n                        <FormLabel id=\"demo-radio-buttons-group-label\" sx={{ padding: 1, zIndex: 1 }}>\n                            Please select the type of the client\n                        </FormLabel>\n                        <RadioGroup\n                            row\n                            aria-labelledby=\"demo-radio-buttons-group-label\"\n                            value={typeOfClient}\n                            onChange={changeClientType}\n                            name=\"radio-buttons-group\"\n                        >\n                            <FormControlLabel value=\"Corporate clients\" control={<Radio />} label=\"Corporate Clients\" />\n                            <FormControlLabel value=\"SMENL\" control={<Radio />} label=\"SMENL\" />\n                            <FormControlLabel value=\"CPF\" control={<Radio />} label=\"CPF\" />\n                            <FormControlLabel value=\"Financial institution\" control={<Radio />} label=\"Financial Institution\" />\n                        </RadioGroup>\n                    </FormControl>\n                    <FormControl>\n                        <FormLabel id=\"demo-radio-buttons-group-label\" sx={{ padding: 0.5 }}>\n                            Please select the country of the client\n                        </FormLabel>\n                        <Autocomplete\n                            id=\"country-selector\"\n                            options={countries}\n                            onChange={(event, newValue) => {\n                                setSelectedCountry(newValue);\n                            }}\n                            value={selectedCountry}\n                            sx={{ width: 300 }}\n                            inputValue={inputValue}\n                            onInputChange={(event, newInputValue) => {\n                                setInputValue(newInputValue);\n                            }}\n                            renderInput={(params) => <TextField {...params} label=\"Country\" />}\n                        />\n                    </FormControl>\n                    <FormControl>\n                        <FormLabel id=\"demo-radio-buttons-group-label\" sx={{ padding: 0.5 }}>\n                            Please select the rating of the client\n                        </FormLabel>\n                        <Autocomplete\n                            id=\"rating-selector\"\n                            options={ratings}\n                            value={selectedRating}\n                            onChange={(event, newValue) => {\n                                setSelectedRating(newValue);\n                            }}\n                            inputValue={ratingInputValue}\n                            onInputChange={(event, newInputValue) => {\n                                setRatingInputValue(newInputValue);\n                            }}\n                            sx={{ width: 300 }}\n                            renderInput={(params) => <TextField {...params} label=\"rating\" />}\n                        />\n                    </FormControl>\n                </Stack>\n            </SubCard>\n            <SubCard title=\"Expected balances position\" sx={{ mt: 3 }}>\n                <Box component=\"form\" sx={{ '& .MuiTextField-root': { m: 1, width: '25ch' } }}>\n                    <Stack direction=\"row\" divider={<Divider orientation=\"vertical\" flexItem />} spacing={20}>\n                        <TextField\n                            id=\"debit balances per entity\"\n                            label=\"Debit balances per entity\"\n                            variant=\"standard\"\n                            onChange={changeDebitBalances}\n                            value={debitBalances}\n                        />\n                        <TextField\n                            id=\"credit balances per entity\"\n                            label=\"Credit balances per entity\"\n                            variant=\"standard\"\n                            onChange={changeCreditBalances}\n                            value={creditBalances}\n                        />\n                        <TextField id=\"limit\" label=\"Limit\" variant=\"standard\" onChange={changeLimit} value={limit} />\n                        <TextField\n                            id=\"expected income\"\n                            label=\"Expected income per year\"\n                            variant=\"standard\"\n                            onChange={changeExpectedIncome}\n                            value={expectedIncome}\n                        />\n                        <TextField\n                            id=\"Hurdle return\"\n                            label=\"Hurdle return\"\n                            variant=\"standard\"\n                            onChange={changeHurdleReturn}\n                            value={hurdleReturn}\n                        />\n                    </Stack>\n                </Box>\n            </SubCard>\n\n            <SubCard title=\"ING input\" sx={{ mt: 3 }}>\n                <Box component=\"form\" sx={{ '& .MuiTextField-root': { m: 1, width: '25ch' } }}>\n                    <Stack direction=\"row\" divider={<Divider orientation=\"vertical\" flexItem />} spacing={20}>\n                        <TextField\n                            id=\"ingGuarantee\"\n                            label=\"ING Guarantee\"\n                            variant=\"standard\"\n                            onChange={changeIngGuarantee}\n                            value={ingGuarantee}\n                        />\n                    </Stack>\n                </Box>\n            </SubCard>\n            <SubCard title=\"Fx correction\" sx={{ mt: 3 }}>\n                <FormControl>\n                    <Box sx={{ '& .MuiTextField-root': { m: 1 } }}>\n                        <FormControlLabel\n                            checked={fxMismatchChecked}\n                            onChange={handleFxMismatchSwitch}\n                            control={<Switch defaultChecked />}\n                            label=\"Apply Fx mismatch\"\n                        />\n                    </Box>\n                </FormControl>\n            </SubCard>\n            <Box>\n                <Button variant=\"contained\" size=\"large\" sx={{ mt: 3, mb: 3, float: 'right' }} onClick={handleToggle}>\n                    Calculate\n                </Button>\n                <Backdrop sx={{ color: '#fff', zIndex: (theme) => theme.zIndex.drawer + 1 }} open={open}>\n                    <CircularProgress color=\"inherit\" />\n                </Backdrop>\n            </Box>\n            <SubCard title=\"Result: RWA Cash\" sx={{ mt: 12 }} hidden={showResult}>\n                <Box component=\"form\" sx={{ '& .MuiTextField-root': { m: 1, width: '25ch' } }}>\n                    <Stack direction=\"row\" divider={<Divider orientation=\"vertical\" flexItem />} spacing={20}>\n                        <TextField\n                            id=\"ead\"\n                            label=\"EAD\"\n                            variant=\"standard\"\n                            InputProps={{\n                                readOnly: true\n                            }}\n                            value={ead}\n                        />\n                        <TextField\n                            id=\"lgd\"\n                            label=\"LGD\"\n                            variant=\"standard\"\n                            InputProps={{\n                                readOnly: true\n                            }}\n                            value={lgd}\n                        />\n                        <TextField\n                            id=\"npvRecSecCash\"\n                            label=\"NPV recovery Secured Cash\"\n                            variant=\"standard\"\n                            InputProps={{\n                                readOnly: true\n                            }}\n                            value={NPVRecoverySecuredCash}\n                        />\n                        <TextField\n                            id=\"npvRecUnSecCash\"\n                            label=\"NPV recovery Unsecured Cash\"\n                            variant=\"standard\"\n                            InputProps={{\n                                readOnly: true\n                            }}\n                            value={NPVRecoveryUnsecuredCash}\n                        />\n                        <TextField\n                            id=\"rwa\"\n                            label=\"Risk Weighted Asset\"\n                            variant=\"standard\"\n                            InputProps={{\n                                readOnly: true\n                            }}\n                            value={rwa}\n                        />\n                    </Stack>\n                </Box>\n            </SubCard>\n            <SubCard title=\"Result: RWA Cash + Guarantee\" sx={{ mt: 12 }} hidden={showResult}>\n                <Box component=\"form\" sx={{ '& .MuiTextField-root': { m: 1, width: '25ch' } }}>\n                    <Stack direction=\"row\" divider={<Divider orientation=\"vertical\" flexItem />} spacing={20}>\n                        <TextField\n                            id=\"lgdCP\"\n                            label=\"LGD Cash + Guarantee\"\n                            variant=\"standard\"\n                            InputProps={{\n                                readOnly: true\n                            }}\n                            value={lgdCashGuar}\n                        />\n                        <TextField\n                            id=\"npvSecCP\"\n                            label=\"NPV recovery Secured Cash + Gurantee\"\n                            variant=\"standard\"\n                            InputProps={{\n                                readOnly: true\n                            }}\n                            value={npvRecSecCashGuar}\n                        />\n                        <TextField\n                            id=\"npvUnsecCP\"\n                            label=\"NPV recovery Unsecured Cash + Gurantee\"\n                            variant=\"standard\"\n                            InputProps={{\n                                readOnly: true\n                            }}\n                            value={npvRecUnSecCashGuar}\n                        />\n                        <TextField\n                            id=\"rwaCP\"\n                            label=\"Risk Weighted Asset Cash + Gurantee\"\n                            variant=\"standard\"\n                            InputProps={{\n                                readOnly: true\n                            }}\n                            value={rwaCashGuar}\n                        />\n                    </Stack>\n                </Box>\n            </SubCard>\n        </MainCard>\n    );\n};\n\nconst countries = country;\n\nconst ratings = rating;\n\nexport default RwaCalculator;\n"],"names":["countries","country","ratings","rating","open","setOpen","React","showResult","setShowResult","ead","setEad","lgd","setLgd","rwa","setRwa","NPVRecoverySecuredCash","setNPVRecoverySecuredCash","NPVRecoveryUnsecuredCash","setNPVRecoveryUnsecuredCash","lgdCashGuar","setLgdCashGuar","npvRecSecCashGuar","setNpvRecSecCashGuar","npvRecUnSecCashGuar","setNpvRecUnSecCashGuar","rwaCashGuar","setRwaCashGuar","typeOfClient","setTypeOfClient","ingGuarantee","setIngGuarantee","debitBalances","setDebitBalances","creditBalances","setCreditBalances","expectedIncome","setExpectedIncome","hurdleReturn","setHurdleReturn","limit","setLimit","selectedCountry","setSelectedCountry","inputValue","setInputValue","selectedRating","setSelectedRating","ratingInputValue","setRatingInputValue","fxMismatchChecked","setFxMismatchChecked","MainCard","title","SubCard","Stack","direction","divider","Divider","orientation","flexItem","spacing","FormControl","FormLabel","id","sx","padding","zIndex","RadioGroup","row","value","onChange","event","target","name","FormControlLabel","control","Radio","label","Autocomplete","options","newValue","width","onInputChange","newInputValue","renderInput","params","TextField","mt","Box","component","m","variant","checked","Switch","defaultChecked","Button","size","mb","float","onClick","console","log","axios","typeOfCustomer","fxMismatch","debitBalance","creditBalance","then","res","data","npvRecSecCash","npvRecUnSecCash","rwaCash","Backdrop","color","theme","drawer","CircularProgress","hidden","InputProps","readOnly"],"sourceRoot":""}